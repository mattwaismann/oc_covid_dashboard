runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
body <- dashboardBody(
tabItems(
tabItem(tabName = "daily",
fluidRow(
infoBox("New cases", subtitle = paste("updated: ", today_date), df$daily_cases_repo %>% tail(1), color = "yellow", fill = T),
infoBox("New deaths", subtitle = paste("updated: ", today_date), df$daily_dth.x %>% tail(1), color = "yellow", fill = T )
),
fluidRow(
box(sliderInput("n_days",label = "Select a number of days", value = 60, min = 14, max = 365),
width = 4,
status = "primary"
)
),
fluidRow(
tabBox(
tabPanel("By reported date",
plotlyOutput("new_cases"),
),
tabPanel("By specimen collection date",
plotlyOutput("new_specimen")
)
),
tabBox(
tabPanel("By reported date",
plotlyOutput("new_deaths"),
),
tabPanel("By actual death date",
plotlyOutput("death_date")
)
)
),
fluidRow(
box(
plotlyOutput("hospicu"),
status = "primary"
),
box(
plotlyOutput("daily_spec"),
status = "primary"
)
)
),
tabItem(tabName = "metrics",
fluidRow(
infoBox("This week's positive test rate", subtitle = paste("updated: ", today_date), paste(pos_mini_df$positivity_for_week %>% tail(1),"%"), color = "yellow", fill = T),
infoBox("This week's adjusted case rate", subtitle = paste("updated: ", today_date), pos_mini_df$case_rate_for_week %>% tail(1), color = "yellow", fill = T),
infoBox("This week's Health Equity Index", subtitle = paste("updated: ", today_date), pos_mini_df$equity_index_for_week %>% tail(1), color = "yellow", fill = T),
),
fluidRow(
column(6, wellPanel(tags$h4("Tier Information"),"The state is now using three statistics to judge counties. With some exceptions, metrics must surpass the benchmark for the next tier in order to loosen restrictions. The latest numbers, along with tier reassignments, are released each Tuesday. The first is called the",strong("adjusted case rate"),". It takes new cases in a recent seven-day period — excluding cases at prisons and jails — and adjusts for population. In some areas, that number is modified to account for the volume of testing. Orange County's most recent adjusted case rate was", pos_mini_df$case_rate_for_week %>% tail(1),
"The second metric is the", strong("positive test rate"),", which is the percentage of tests for the virus that come back positive. Orange County's most recent positive test rate was",pos_mini_df$positivity_for_week %>% tail(1),"%.
The third metric measures whether positive tests in the most disadvantaged neighborhoods have significantly exceeded a county's overall rate — a disparity that's been widespread during the pandemic. The statistic is known as the", strong("Health Equity Index"),". Orange County’s most recent score is",pos_mini_df$equity_index_for_week %>% tail(1),"."
)
),
column(6, box(plotOutput("positivity"), status = TRUE)
)
),
fluidRow(
box(plotOutput("case_rate"),
status = "primary"
),
box(plotOutput("equity_index"),
status = "primary"
)
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
fonts()
## app. R ##
source("global.R")
fonts()
.libpaths()
install.packages("shiny")
shiny::runApp()
install.packages("shinydashboard")
runApp()
install.packages("plyr")
runApp()
install.packages("ggthemes")
runApp()
library(extrafont)
library(zoo)
install.packages("zoo")
#library(Cairo) #for anti-aliasing
library(plotly)
install.packages("plotly")
runApp()
runApp()
runApp()
#reading
datasets = c("case","death","blueprint", "main","hospicu","pcr")
for(i in 1:length(datasets)){
detail <- datasets[i]
assign(paste(detail,"_list", sep = ""),fromJSON(paste("json_data/covid_dataoccovid_",detail,"_csv.json",sep = "")))
}
#cleaning
blueprint_df <- blueprint_list$features$attributes
case_df <- case_list$features$attributes
death_df <- death_list$features$attributes
main_df <- main_list$features$attributes
hospicu_df <- hospicu_list$features$attributes
pcr_df <- pcr_list$features$attributes
names(case_df)[1] <- 'date'
#merging
#UPDATE NAS TO REMOVE
big_df = left_join(case_df,blueprint_df,by = c("date")) %>% left_join(y=death_df,by = c("date")) %>% left_join(y=main_df, by = c("date")) %>% left_join(y=hospicu_df, by = c("date"))%>% left_join(y = pcr_df, by = c("date"))
big_df <- big_df[-(386:405),]
#select  only relevant features
names(big_df)
relevant <- c('date','total_cases_repo','daily_cases_repo','daily_cases_spec','daily_7day_avg.x','daily_dth.x','dth_date','total_dth_date','daily_neg_spec','daily_pos_spec','daily_spec','tot_pcr_pos','cdph_tpp','daily_test_repo','daily_7day_avg.y','daily_case_rate','positive_rate','new_var','hospital','icu')
df <- big_df %>% select(relevant)
View(df)
#adding dates
#UPDATE DATE BY 1
date_seq = seq(as.Date("2020/01/22"),as.Date(today_date), "days")
View(pcr_df)
View(df)
#merging
#UPDATE NAS TO REMOVE
big_df = left_join(case_df,blueprint_df,by = c("date")) %>% left_join(y=death_df,by = c("date")) %>% left_join(y=main_df, by = c("date")) %>% left_join(y=hospicu_df, by = c("date"))%>% left_join(y = pcr_df, by = c("date"))
View(big_df)
runApp()
runApp()
#Date
today_date = "2021/02/16"
#reading
datasets = c("case","death","blueprint", "main","hospicu","pcr")
for(i in 1:length(datasets)){
detail <- datasets[i]
assign(paste(detail,"_list", sep = ""),fromJSON(paste("json_data/covid_dataoccovid_",detail,"_csv.json",sep = "")))
}
#cleaning
blueprint_df <- blueprint_list$features$attributes
case_df <- case_list$features$attributes
death_df <- death_list$features$attributes
main_df <- main_list$features$attributes
hospicu_df <- hospicu_list$features$attributes
pcr_df <- pcr_list$features$attributes
names(case_df)[1] <- 'date'
#adding dates
#UPDATE DATE BY 1
date_seq = seq(as.Date("2020/01/22"),as.Date(today_date), "days")
df$date <- date_seq
#merging
#UPDATE NAS TO REMOVE
big_df = left_join(case_df,blueprint_df,by = c("date")) %>% left_join(y=death_df,by = c("date")) %>% left_join(y=main_df, by = c("date")) %>% left_join(y=hospicu_df, by = c("date"))%>% left_join(y = pcr_df, by = c("date"))
big_df <- big_df[-((length(date_seq)+1):405),]
#select  only relevant features
names(big_df)
relevant <- c('date','total_cases_repo','daily_cases_repo','daily_cases_spec','daily_7day_avg.x','daily_dth.x','dth_date','total_dth_date','daily_neg_spec','daily_pos_spec','daily_spec','tot_pcr_pos','cdph_tpp','daily_test_repo','daily_7day_avg.y','daily_case_rate','positive_rate','new_var','hospital','icu')
#select  only relevant features
names(big_df)
relevant <- c('date','total_cases_repo','daily_cases_repo','daily_cases_spec','daily_7day_avg.x','daily_dth.x','dth_date','total_dth_date','daily_neg_spec','daily_pos_spec','daily_spec','tot_pcr_pos','cdph_tpp','daily_test_repo','daily_7day_avg.y','daily_case_rate','positive_rate','new_var','hospital','icu')
df <- big_df %>% select(relevant)
df$date <- date_seq
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
#Date
today_date = "2021/02/22"
#reading
datasets = c("case","death","blueprint", "main","hospicu","pcr")
for(i in 1:length(datasets)){
detail <- datasets[i]
assign(paste(detail,"_list", sep = ""),fromJSON(paste("json_data/covid_dataoccovid_",detail,"_csv.json",sep = "")))
}
#cleaning
blueprint_df <- blueprint_list$features$attributes
case_df <- case_list$features$attributes
death_df <- death_list$features$attributes
main_df <- main_list$features$attributes
hospicu_df <- hospicu_list$features$attributes
pcr_df <- pcr_list$features$attributes
names(case_df)[1] <- 'date'
runApp()
pnorm(290,mean=260,sd=20)
1-pnorm(290,mean=260,sd=20)
shiny::runApp()
View(blueprint_df)
shiny::runApp()
shiny::runApp()
shiny::runApp()
#Date
today_date = "2021/03/02"
#reading
datasets = c("case","death","blueprint", "main","hospicu","pcr")
for(i in 1:length(datasets)){
detail <- datasets[i]
assign(paste(detail,"_list", sep = ""),fromJSON(paste("json_data/covid_dataoccovid_",detail,"_csv.json",sep = "")))
}
#Date
today_date = "2021/03/02"
#reading
datasets = c("case","death","blueprint", "main","hospicu","pcr")
for(i in 1:length(datasets)){
detail <- datasets[i]
assign(paste(detail,"_list", sep = ""),fromJSON(paste("json_data/covid_dataoccovid_",detail,"_csv.json",sep = "")))
}
#cleaning
blueprint_df <- blueprint_list$features$attributes
case_df <- case_list$features$attributes
death_df <- death_list$features$attributes
#reading
datasets = c("death","blueprint", "main","hospicu","pcr")
for(i in 1:length(datasets)){
detail <- datasets[i]
assign(paste(detail,"_list", sep = ""),fromJSON(paste("json_data/covid_dataoccovid_",detail,"_csv.json",sep = "")))
}
#reading
datasets = c("death","blueprint", "case","main","hospicu","pcr")
for(i in 1:length(datasets)){
detail <- datasets[i]
assign(paste(detail,"_list", sep = ""),fromJSON(paste("json_data/covid_dataoccovid_",detail,"_csv.json",sep = "")))
}
fromJSON("json_data/covid_dataoccovid_case_csv.json")
fromJSON("json_data/covid_dataoccovid_case_csv.json")
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
#Date
today_date = "2021/03/31"
shiny::runApp()
shiny::runApp()
shiny::runApp()
#Date
today_date = "2021/04/12"
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
library(readr)
date_area_G222987E58962N <- read_csv("C:/Users/mattw/Desktop/projects/glacier_segmentation/R/date_area_G222987E58962N.csv")
View(date_area_G222987E58962N)
library(readr)
date_area_G222987E58962N <- read_csv("C:/Users/mattw/Desktop/projects/glacier_segmentation/R/date_area_G222987E58962N.csv")
View(date_area_G222987E58962N)
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
body <- dashboardBody(
tabItems(
tabItem(tabName = "daily",
fluidRow(
infoBox("New cases", subtitle = paste("updated: ", today_date), df$daily_cases_repo %>% tail(1), color = "yellow", fill = T),
infoBox("New deaths", subtitle = paste("updated: ", today_date), df$daily_dth.x %>% tail(1), color = "yellow", fill = T )
),
fluidRow(
box(sliderInput("n_days",label = "Select a number of days", value = 60, min = 14, max = 365),
width = 4,
status = "primary"
)
),
fluidRow(
tabBox(
tabPanel("By reported date",
plotlyOutput("new_cases"),
),
tabPanel("By specimen collection date",
plotlyOutput("new_specimen")
)
),
tabBox(
tabPanel("By reported date",
plotlyOutput("new_deaths"),
),
tabPanel("By actual death date",
plotlyOutput("death_date")
)
)
),
fluidRow(
box(
plotlyOutput("hospicu"),
status = "primary"
),
box(
plotlyOutput("daily_spec"),
status = "primary"
)
)
?strong
),
tabItem(tabName = "metrics",
fluidRow(
infoBox("This week's positive test rate", subtitle = paste("updated: ", today_date), paste(pos_mini_df$positivity_for_week %>% tail(1),"%"), color = "yellow", fill = T),
infoBox("This week's adjusted case rate", subtitle = paste("updated: ", today_date), pos_mini_df$case_rate_for_week %>% tail(1), color = "yellow", fill = T),
infoBox("This week's Health Equity Index Quartile", subtitle = paste("updated: ", today_date), paste(pos_mini_df$equity_index_for_week %>% tail(1), "%"), color = "yellow", fill = T),
),
fluidRow(
box(tags$h4("Tier Information"),"The state is now using three statistics to judge counties. With some exceptions, metrics must surpass the benchmark for the next tier in order to loosen restrictions. The latest numbers, along with tier reassignments, are released each Tuesday. The first is called the",strong("adjusted case rate"),". It takes new cases in a recent seven-day period — excluding cases at prisons and jails — and adjusts for population. In some areas, that number is modified to account for the volume of testing. Orange County's most recent adjusted case rate was", pos_mini_df$case_rate_for_week %>% tail(1),".
The second metric is the", strong("positive test rate"),", which is the percentage of tests for the virus that come back positive. Orange County's most recent positive test rate was",pos_mini_df$positivity_for_week %>% tail(1),"%.
The third metric measures whether positive tests in the most disadvantaged neighborhoods have significantly exceeded a county's overall rate — a disparity that's been widespread during the pandemic. The statistic is known as the", strong("Health Equity Index"),". Orange County’s most recent score is",pos_mini_df$equity_index_for_week %>% tail(1),"%.",
status = "primary"
),
box(plotOutput("positivity"), status = "primary"
)
),
fluidRow(
box(plotOutput("case_rate"),
status = "primary"
),
box(plotOutput("equity_index"),
status = "primary"
)
)
)
)
runApp()
runApp()
runApp()
library(cairo)
library(Cairo)
install.packages("Cairo")
library(Cairo)
rnorm(100)
seq(0,100,100)
seq(1,100,1)
y = rnorm(100)
plot(x,y)
y = rnorm(100)
x = seq(1,100,1)
plot(x,y)
plot(x,y,type = 'l')
CairoWin()
y = rnorm(100)
x = seq(1,100,1)
plot(x,y,type = 'l')
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
#Date
today_date = "2021/06/13"
#reading
datasets = c("case","death","blueprint","main","hospicu","pcr")
for(i in 1:length(datasets)){
detail <- datasets[i]
assign(paste(detail,"_list", sep = ""),fromJSON(paste("json_data/covid_dataoccovid_",detail,"_csv.json",sep = "")))
}
#cleaning
blueprint_df <- blueprint_list$features$attributes
case_df <- case_list$features$attributes
death_df <- death_list$features$attributes
main_df <- main_list$features$attributes
hospicu_df <- hospicu_list$features$attributes
pcr_df <- pcr_list$features$attributes
names(case_df)[1] <- 'date'
#adding dates
#UPDATE DATE BY 1
date_seq = seq(as.Date("2020/01/22"),as.Date(today_date), "days")
#merging
#UPDATE NAS TO REMOVE
big_df = left_join(case_df,blueprint_df,by = c("date")) %>% left_join(y=death_df,by = c("date")) %>% left_join(y=main_df, by = c("date")) %>% left_join(y=hospicu_df, by = c("date"))%>% left_join(y = pcr_df, by = c("date"))
date_seq
big_df
View(big_df)
View(df)
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
